










global:
  imageRegistry: ""
  
  
  
  
  imagePullSecrets: []





kubeVersion: ""


nameOverride: ""


fullnameOverride: ""


namespaceOverride: ""


commonLabels: {}


commonAnnotations: {}


extraDeploy: []


clusterDomain: cluster.local












image:
  registry: docker.io
  repository: bitnami/nginx-ingress-controller
  tag: 1.9.5-debian-11-r3
  digest: ""
  
  
  
  
  pullPolicy: IfNotPresent
  
  
  
  
  
  
  
  pullSecrets: []


containerPorts:
  http: 8080
  https: 8443
  metrics: 10254



hostAliases: []



config: {}



proxySetHeaders: {}



addHeaders: {}



defaultBackendService: ""


electionID: ingress-controller-leader


allowSnippetAnnotations: false




reportNodeInternalIp: false


watchIngressWithoutClass: false







ingressClassResource:
  name: nginx
  enabled: true
  default: false
  controllerClass: "k8s.io/ingress-nginx"
  parameters: {}



publishService:
  
  
  enabled: false
  
  
  
  pathOverride: ""



scope:
  enabled: false
  namespace: ""



configMapNamespace: ""



tcpConfigMapNamespace: ""



udpConfigMapNamespace: ""


maxmindLicenseKey: ""



dhParam: ""






tcp: {}






udp: {}


command: []


args: []


lifecycleHooks: {}






extraArgs: {}









extraEnvVars: []


extraEnvVarsCM: ""


extraEnvVarsSecret: ""





kind: Deployment


daemonset:
  
  
  useHostPort: false
  
  
  hostPorts:
    http: 80
    https: 443


replicaCount: 1



updateStrategy: {}


revisionHistoryLimit: 10








podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001











containerSecurityContext:
  enabled: true
  allowPrivilegeEscalation: false
  seLinuxOptions: {}
  runAsUser: 1001
  capabilities:
    drop: ["ALL"]
    add: ["NET_BIND_SERVICE"]
  runAsNonRoot: true
  seccompProfile:
    type: "RuntimeDefault"


minReadySeconds: 0









resources:
  
  
  
  
  limits: {}
  
  
  
  
  requests: {}









livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1









readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1









startupProbe:
  enabled: false
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1


customLivenessProbe: {}


customReadinessProbe: {}


customStartupProbe: {}


lifecycle: {}



podLabels: {}



podAnnotations: {}



priorityClassName: ""



schedulerName: ""




hostNetwork: false




dnsPolicy: ClusterFirst




dnsConfig: {}


terminationGracePeriodSeconds: 60



podAffinityPreset: ""



podAntiAffinityPreset: soft



nodeAffinityPreset:
  
  
  type: ""
  
  
  
  
  key: ""
  
  
  
  
  
  
  values: []




affinity: {}



nodeSelector: {}



tolerations: []


extraVolumes: []


extraVolumeMounts: []










initContainers: []










sidecars: []


customTemplate:
  configMapName: ""
  configMapKey: ""











topologySpreadConstraints: []



podSecurityPolicy:
  enabled: false





defaultBackend:
  
  
  enabled: true
  
  
  
  hostAliases: []
  
  
  
  
  
  
  
  
  
  image:
    registry: docker.io
    repository: bitnami/nginx
    tag: 1.25.3-debian-11-r4
    digest: ""
    
    
    
    
    pullPolicy: IfNotPresent
    
    
    
    
    
    
    
    pullSecrets: []
  
  
  extraArgs: {}
  
  
  containerPort: 8080
  
  
  
  serverBlockConfig: |-
    location /healthz {
      return 200;
    }

    location / {
      return 404;
    }
  
  
  replicaCount: 1
  
  
  
  
  
  
  
  
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  
  
  
  
  
  
  
  
  
  
  containerSecurityContext:
    enabled: true
    allowPrivilegeEscalation: false
    seLinuxOptions: {}
    runAsUser: 1001
    capabilities:
      drop: ["ALL"]
    runAsNonRoot: true
    seccompProfile:
      type: "RuntimeDefault"
  
  
  
  
  
  
  
  
  
  resources:
    
    
    
    
    limits: {}
    
    
    
    
    requests: {}
  
  
  
  
  
  
  
  
  
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  
  
  
  
  
  
  
  
  
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  
  
  
  
  
  
  
  
  
  startupProbe:
    enabled: false
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  
  
  customStartupProbe: {}
  
  
  customLivenessProbe: {}
  
  
  customReadinessProbe: {}
  
  
  
  podLabels: {}
  
  
  
  podAnnotations: {}
  
  
  
  priorityClassName: ""
  
  
  
  schedulerName: ""
  
  
  
  terminationGracePeriodSeconds: 60
  
  
  
  
  topologySpreadConstraints: []
  
  
  
  podAffinityPreset: ""
  
  
  
  podAntiAffinityPreset: soft
  
  
  
  nodeAffinityPreset:
    
    
    type: ""
    
    
    
    
    key: ""
    
    
    
    
    
    
    values: []
  
  
  command: []
  
  
  args: []
  
  
  lifecycleHooks: {}
  
  
  
  
  
  
  extraEnvVars: []
  
  
  extraEnvVarsCM: ""
  
  
  extraEnvVarsSecret: ""
  
  
  extraVolumes: []
  
  
  extraVolumeMounts: []
  
  
  
  
  
  
  
  
  
  
  sidecars: []
  
  
  
  
  
  
  
  
  
  initContainers: []
  
  
  
  
  affinity: {}
  
  
  
  nodeSelector: {}
  
  
  
  tolerations: []
  
  
  service:
    
    
    type: ClusterIP
    
    
    ports:
      http: 80
    
    
    annotations: {}
  
  
  
  pdb:
    
    
    create: false
    
    
    minAvailable: 1
    
    
    maxUnavailable: ""





service:
  
  
  type: LoadBalancer
  
  
  ports:
    http: 80
    https: 443
  
  
  targetPorts:
    http: http
    https: https
  
  
  
  nodePorts:
    http: ""
    https: ""
    tcp: {}
    udp: {}
  
  
  
  
  annotations: {}
  
  
  labels: {}
  
  
  clusterIP: ""
  
  
  
  externalIPs: []
  
  
  
  
  ipFamilyPolicy: ""
  
  
  
  
  ipFamilies: []
  
  
  
  loadBalancerIP: ""
  
  
  
  loadBalancerSourceRanges: []
  
  
  extraPorts: []
  
  
  
  
  externalTrafficPolicy: ""
  
  
  healthCheckNodePort: 0
  
  
  
  
  sessionAffinity: None
  
  
  
  
  
  sessionAffinityConfig: {}






serviceAccount:
  
  
  create: true
  
  
  name: ""
  
  
  
  annotations: {}
  
  
  automountServiceAccountToken: true



rbac:
  
  
  create: true
  
  
  
  
  
  
  
  
  
  
  
  rules: []





pdb:
  
  
  create: false
  
  
  minAvailable: 1
  
  
  maxUnavailable: ""







autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: ""
  targetMemory: ""





metrics:
  
  
  enabled: false
  
  
  service:
    
    
    type: ClusterIP
    
    
    ports:
      metrics: 9913
    
    
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ coalesce .Values.metrics.service.ports.metrics .Values.metrics.service.port }}"
    
    
    labels: {}
  
  
  serviceMonitor:
    
    
    enabled: false
    
    
    namespace: ""
    
    
    jobLabel: ""
    
    
    
    interval: 30s
    
    
    
    
    
    scrapeTimeout: ""
    
    
    
    relabelings: []
    
    
    
    metricRelabelings: []
    
    
    
    
    
    
    selector: {}
    
    
    annotations: {}
    
    
    labels: {}
    
    
    honorLabels: false

  
  
  
  
  
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []

